import Mathlib

open Equiv
open Subgroup

noncomputable section

/-- The n-cycle that sends i ↦ i + 1 (mod n) on Fin n. We leave bijectivity proof as `sorry`. -/
def sigma (n : ℕ) : Perm (Fin n) :=
  Equiv.ofBijective (fun i : Fin n => Fin.ofNat n (i.val + 1)) (by sorry)

/-- For n ≥ 2, the symmetric group on n letters (as Perm (Fin n)) is generated by the
    transposition (0 1) and the n-cycle sigma. -/
theorem symmetric_generated_by_transposition_and_cycle (n : ℕ) (hn : 2 ≤ n) :
  Subgroup.closure ({swap (Fin.ofNat n 0) (Fin.ofNat n 1), sigma n} : Set (Perm (Fin n))) = (⊤ : Subgroup (Perm (Fin n))) := by sorry

end noncomputable section