import Mathlib

/-- For n ≥ 2, the symmetric group S_n (as Perm (Fin n)) is generated by the adjacent
    transpositions {(0 1), (1 2), ..., (n-2 n-1)}. We index the adjacent transpositions
    by i : Fin (n-1), mapping i ↦ swap (Fin.cast _ (Fin.castSucc i)) (Fin.cast _ (Fin.succ i)). -/
theorem symmetric_group_generated_by_adjacent_transpositions (n : ℕ) (hn : 2 ≤ n) :
  Subgroup.closure (Set.range (fun i : Fin (n - 1) =>
    let h1 : 1 ≤ n := Nat.le_trans (by decide) hn
    let eq := Nat.sub_add_cancel h1
    Equiv.swap (Fin.cast eq (Fin.castSucc i)) (Fin.cast eq (Fin.succ i))))
    = (⊤ : Subgroup (Equiv.Perm (Fin n))) := by sorry
