import Mathlib

open Equiv

/-- For n ≥ 2, the symmetric group on n letters (Perm (Fin n)) is generated by the transposition (0 1)
    and the n-cycle sending i ↦ i+1 (mod n). -/
theorem symmetric_group_generated_by_transposition_and_cycle (n : ℕ) (hn : 2 ≤ n) :
  Subgroup.closure ({ Equiv.swap (Fin.mk 0 (by linarith : 0 < n)) (Fin.mk 1 (by linarith : 1 < n)),
    -- the cycle (0 1 ... n-1) as a permutation of `Fin n`.
    Equiv.ofBijective (fun i : Fin n => ⟨(i.val + 1) % n, by apply Nat.mod_lt; linarith⟩) (by sorry) } : Set (Equiv.Perm (Fin n)))
  = (⊤ : Subgroup (Equiv.Perm (Fin n))) := by sorry
