import Mathlib

open Set

variable {X : Type _}

/-- A predicate saying a collection T of subsets of X is a topology. -/
def is_topology (T : Set (Set X)) : Prop :=
  (∅ : Set X) ∈ T ∧ (univ : Set X) ∈ T ∧
  (∀ s t, s ∈ T → t ∈ T → s ∩ t ∈ T) ∧
  (∀ 𝒞 : Set (Set X), (∀ s ∈ 𝒞, s ∈ T) → sUnion 𝒞 ∈ T)

/-- A predicate saying B is a basis for a topology on X. -/
def is_basis (B : Set (Set X)) : Prop :=
  (∀ x : X, ∃ b ∈ B, x ∈ b) ∧
  (∀ b1 ∈ B, ∀ b2 ∈ B, ∀ x ∈ b1 ∩ b2, ∃ b3 ∈ B, x ∈ b3 ∧ b3 ⊆ b1 ∩ b2)

/-- The topology generated by a basis B as the collection of unions of elements of B. -/
def topology_from_basis (B : Set (Set X)) : Set (Set X) :=
  { U | ∃ 𝒞 : Set (Set X), 𝒞 ⊆ B ∧ U = sUnion 𝒞 }

/-- The topology generated by B as the intersection of all topologies containing B. -/
def topology_generated_by_intersection (B : Set (Set X)) : Set (Set X) :=
  sInter { T | is_topology T ∧ B ⊆ T }

/-- Exercise: If B is a basis for a topology on X, then the topology generated by B
    (as unions of basis elements) equals the intersection of all topologies on X that
    contain B. -/
theorem Munkres_exercise_13_5a (B : Set (Set X)) (h : is_basis B) :
  topology_from_basis B = topology_generated_by_intersection B := by sorry
