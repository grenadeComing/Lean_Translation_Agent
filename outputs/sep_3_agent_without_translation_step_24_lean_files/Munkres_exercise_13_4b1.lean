import Mathlib

/-!
Exercise: Let `T : α → TopologicalSpace X` be a family of topologies on `X`.
Show that there is a unique smallest topology on `X` containing all the collections `T i`.
We formalize this by taking the union of all open sets from the family and
using `TopologicalSpace.generateFrom` to produce the generated topology.
-/

variable {X : Type _} {α : Type _} (T : α → TopologicalSpace X)

/-- The union of the opens from the family of topologies `T`. -/
def union_opens_set : Set (Set X) := { U | ∃ i, @IsOpen X (T i) U }

theorem exists_unique_smallest_topology_containing :
  ∃! (τ : TopologicalSpace X),
    (∀ i U, @IsOpen X (T i) U → @IsOpen X τ U) ∧
    (∀ τ', (∀ i U, @IsOpen X (T i) U → @IsOpen X τ' U) → (∀ U, @IsOpen X τ U → @IsOpen X τ' U)) :=
by
  -- The topology generated by `union_opens_set` is a topology containing all the
  -- given topologies' opens, and it is the smallest with that property.
  -- We omit the proof and use `sorry` here.
  have : TopologicalSpace X := TopologicalSpace.generateFrom (union_opens_set T)
  exact ⟨this, by sorry, by sorry⟩
