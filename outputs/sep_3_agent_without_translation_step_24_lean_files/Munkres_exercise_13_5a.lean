import Mathlib

open Set

universe u

/-- A collection A of subsets of X is a basis for a topology on X if
  (1) the union of A is the whole space, and
  (2) for any two basis elements s,t and any x in s ∩ t there is a basis
      element u containing x and contained in s ∩ t. -/
def IsBasis {X : Type u} (A : Set (Set X)) : Prop :=
  (⋃₀ A) = (univ : Set X) ∧
  ∀ s t, s ∈ A → t ∈ A → ∀ x, x ∈ s ∩ t → ∃ u, u ∈ A ∧ x ∈ u ∧ u ⊆ s ∩ t

/-- If A is a basis for a topology on X, then the topology generated by A
    is exactly the intersection of all topologies on X that contain A.

    We express this by stating that the predicate of being open in the
    generated topology equals the predicate of being open in every topology
    that contains A. -/
theorem generateFrom_eq_inter {X : Type u} (A : Set (Set X)) (hA : IsBasis (A : Set (Set X))) :
  (fun U => @IsOpen X (TopologicalSpace.generateFrom A) U) =
  (fun U => ∀ t : TopologicalSpace X, (∀ V ∈ A, @IsOpen X t V) → @IsOpen X t U) := by sorry
