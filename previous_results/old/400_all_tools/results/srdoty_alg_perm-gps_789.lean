import Mathlib

open Equiv Function

/-- Let n ≥ 2. Prove that the symmetric group S_n is generated by the two elements S = { (1 2), (1 2 3 ... n) }.
We represent {1..n} as Fin n (0..n-1). The transposition (1 2) is Equiv.swap (0 : Fin n) 1.
The n-cycle (1 2 ... n) is given by adding 1 mod n on Fin n. -/

noncomputable def perm_add_one (n : ℕ) (hn : 1 < n) : Equiv.Perm (Fin n) :=
  Equiv.ofBijective (fun x => x + 1)
    (by
      haveI : NeZero n := NeZero.of_pos (Nat.pos_of_gt hn)
      refine'
        ⟨fun a b h => by
          have h' := congrArg Fin.val h
          simp [Fin.val_add] at h'
          exact Fin.eq_of_veq h',
        fun y => by
          use Fin.ofNat n (y.val + n - 1)
          simp [Fin.ofNat, Fin.val_ofNat]
          ] )

theorem S_n_generated_by_swap_and_cycle (n : ℕ) (hn : 1 < n) :
  Subgroup.closure ({Equiv.swap (0 : Fin n) 1, perm_add_one n hn} : Set (Equiv.Perm (Fin n))) = ⊤ := by
  sorry
